function [beta] = polynomial_div(S,N,K,lambdas,percentage)
% =========================================================================
%                  Polynomial Division Algorithm (Cristina)
% =========================================================================
% Description: the function obtains the polynomial generated by the highest
% eigenvalues of the laplacian that are set to be the roots of the original
% polynomial g_ker; it then divides the original polynomial by the reduces
% one to obtaine the filtered polynomial.
%% Input:
%   plot_kernels = flag
%   lambdas = the vector containing all the eigenvalues of the Laplacian
%   lambda_powers = all the powers of the eigenvalues
%   percentage = the threshold at which we want our kernels to go to zero
%% Output:
%   kernels = the new kernel functions
%   new_alpha = new alpa coefficients given by the costraint over the
%   eignevalues

%--provisional--
%I decide to take as the last lambdas all the roots of the polynomial
% percentage = degree;
% lambda_sym = param.lambda_sym;
%--------------
    lambdas_to_cut = lambdas(length(lambdas)-2*percentage+1:length(lambdas),1);

    %Transpose of Vandermonde matrix

    lambda_vand = zeros(percentage);
        for j = 1:percentage
            for i = 1:percentage
                lambda_vand(i,j) = lambdas_to_cut(i)^(percentage-j);
            end
        end
    gammas = null(lambda_vand);
    i = 1;
          
    if gammas(1,1) > 0
        beta = gammas(:,1);
    else
        while gammas(1,i) < 0
          if i < length(gammas(1,:))
              i = i+1;
          elseif i == length(gammas(1,:))
              beta = -gammas(:,i);
          end
        end
    end
    


